---
import AsideItem from '@/components/AsideItem.tsx';
const { title } = Astro.props.frontmatter || Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <title>{title}</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="Blogs made by FMGordillo" />
  </head>
  <body
    class="m-auto py-4 px-8 flex flex-col gap-4 dark:text-white dark:bg-black"
  >
    <!-- <nav class="flex"> -->
    <!--   <ul class="flex mx-auto space-x-4"> -->
    <!--     <li class="after:content-['|'] after:ml-4"><a href="/">Home</a></li> -->
    <!--     <li><button id="search-button">Search</button></li> -->
    <!--   </ul> -->
    <!--   <label -->
    <!--     title="WARNING: Very bright" -->
    <!--     class="flex gap-4 hover:cursor-pointer" -->
    <!--   > -->
    <!--     <span class="select-none">Light mode</span> -->
    <!--     <input -->
    <!--       class="hover:cursor-pointer" -->
    <!--       type="checkbox" -->
    <!--       role="switch" -->
    <!--       id="change-theme-btn" -->
    <!--     /> -->
    <!--   </label> -->
    <!-- </nav> -->

    <aside class="fixed hidden inset-y-0 lg:block">
      <ul class="flex h-full w-8 flex-col gap-8 justify-center">
        <AsideItem client:only="solidjs" icon="github" />
        <AsideItem client:only="solidjs" icon="twitch" />
      </ul>
    </aside>
    <main class="max-w-prose mx-auto">
      <slot />
    </main>
  </body>
  <div
    class="-z-10 transition fixed inset-0 h-screen bg-gradient-to-tl from-red-400 dark:from-rose-950"
  >
  </div>
  <div
    class="-z-10 transition fixed inset-0 h-screen bg-gradient-to-tr from-amber-200 dark:from-amber-900"
  >
  </div>
  <div
    class="-z-10 transition fixed inset-0 h-screen bg-gradient-to-b from-purple-300 dark:from-purple-800"
  >
  </div>
  <div id="search-bar" class="h-screen isolate hidden inset-x-0 inset-y-0 z-1">
    <input
      class="text-black py-2 px-4 rounded"
      placeholder="Search an article"
    />
  </div>

  <script>
    const htmlEl = document.querySelector("html");
    const themeBtn = document.querySelector("#change-theme-btn");
    const searchBarEl = document.querySelector("#search-bar");
    const searchButtonEl = document.querySelector("#search-button");

    const getIsInputHidden = () => searchBarEl?.classList.contains("hidden");

    const handleInputHide = () => {
      if (searchBarEl) {
        searchBarEl.classList.add("hidden");
        searchBarEl.classList.remove("fixed");
        (searchBarEl.children[0] as HTMLInputElement).value = "";
      }
    };

    const handleInputShow = () => {
      if (searchBarEl) {
        searchBarEl.classList.add("absolute");
        searchBarEl.classList.remove("hidden");
        (searchBarEl.children[0] as HTMLInputElement).focus();
      }
    };

    window.addEventListener("click", function handleClick(e) {
      if (!getIsInputHidden() && e.target === searchBarEl) {
        e.preventDefault();
        handleInputHide();
        return;
      }
    });

    window.addEventListener("keydown", function handleOpenSearch(e) {
      if (searchBarEl) {
        if (e.key === "Escape") {
          e.preventDefault();
          handleInputHide();
        }

        if (e.ctrlKey && e.key === "k") {
          e.preventDefault();
          if (getIsInputHidden()) {
            handleInputShow();
          } else {
            handleInputHide();
          }
        }
      }
    });

    searchButtonEl?.addEventListener(
      "click",
      function handleSearchButtonClick(e) {
        e.preventDefault();
        handleInputShow();
      }
    );

    searchBarEl?.addEventListener("keydown", function handleSearch(e) {
      if ((e as KeyboardEvent).key === "Enter") {
        e.preventDefault();
        console.log("TODO: Handle search");
      }
    });

    themeBtn?.addEventListener("click", function handleThemeChange() {
      if (htmlEl) {
        htmlEl.className = htmlEl.className === "dark" ? "light" : "dark";
      }
    });
  </script>
</html>
