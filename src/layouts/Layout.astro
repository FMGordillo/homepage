---
import AsideItem from "@/components/AsideItem.tsx";
import Link from "@/components/Link.astro";
const { title, description, backUrl } = Astro.props.frontmatter || Astro.props;
---

<!doctype html>
<html lang="en" class="h-full dark">
  <head>
    <title>{title}</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" initial-scale="1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta
      name="description"
      content={description || "Blogs made by FMGordillo"}
    />
    <!-- Google Tag Manager -->
    <script>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-5XJ8T97");
    </script>
    <!-- End Google Tag Manager -->
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-P2GEHG6YVW"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-P2GEHG6YVW");
    </script>
  </head>

  <body class="text-base mx-auto py-4 px-8 dark:text-white dark:bg-black">
    <!-- Google Tag Manager (noscript) -->
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-5XJ8T97"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >
    <!-- End Google Tag Manager (noscript) -->
    <aside class="fixed hidden inset-y-0 lg:block">
      <ul class="flex h-full w-8 flex-col gap-8 justify-center">
        <AsideItem client:only="solidjs" icon="github" />
        <AsideItem client:only="solidjs" icon="twitch" />
        <AsideItem client:only="solidjs" icon="linkedin" />
      </ul>
    </aside>

    <main class="flex-1 max-w-prose mx-auto">
      <nav
        class="flex justify-between -mx-8 left-0 rounded px-8 sticky top-0 py-4 transition-all"
      >
        <Link href={backUrl ?? "/"}>
          <span role="img" aria-hidden="true">⬅️</span>
           Back
        </Link>

        <span class="text-ellipsis">{title ?? "Facu's website"}</span>
      </nav>
      <div id="content">
        <slot />
      </div>
    </main>

    <footer>
      Icons by <Link href="https://ionic.io">Ionic.io</Link>
    </footer>
  </body>

  <div
    class="-z-10 transition fixed inset-0 min-h-screen bg-gradient-to-tl from-red-400 dark:from-rose-950"
  >
  </div>
  <div
    class="-z-10 transition fixed inset-0 min-h-screen bg-gradient-to-tr from-amber-200 dark:from-amber-900"
  >
  </div>
  <div
    class="-z-10 transition fixed inset-0 min-h-screen bg-gradient-to-b from-purple-300 dark:from-purple-800"
  >
  </div>
  <div id="search-bar" class="h-screen isolate hidden inset-x-0 inset-y-0 z-1">
    <input
      class="text-black py-2 px-4 rounded"
      placeholder="Search an article"
    />
  </div>

  <script>
    const htmlEl = document.querySelector("html");
    const themeBtn = document.querySelector("#change-theme-btn");
    const searchBarEl = document.querySelector("#search-bar");
    const searchButtonEl = document.querySelector("#search-button");
    const contentEl = document.querySelector("#content");
    const navEl = document.querySelector("nav");

    const navElClasses = ["bg-slate-900/80", "mix-blend-normal"];

    function stickyNav() {
      if (contentEl && navEl) {
        console.log(
          window.scrollY,
          contentEl.offsetTop,
          contentEl.offsetHeight,
        );
        if (window.scrollY >= contentEl.offsetTop - 8) {
          navElClasses.forEach((style) => navEl.classList.add(style));
        } else {
          navElClasses.forEach((style) => navEl.classList.remove(style));
        }
      }
    }

    window.onscroll = function () {
      stickyNav();
    };

    const getIsInputHidden = () => searchBarEl?.classList.contains("hidden");

    const handleInputHide = () => {
      if (searchBarEl) {
        searchBarEl.classList.add("hidden");
        searchBarEl.classList.remove("fixed");
        (searchBarEl.children[0] as HTMLInputElement).value = "";
      }
    };

    const handleInputShow = () => {
      if (searchBarEl) {
        searchBarEl.classList.add("absolute");
        searchBarEl.classList.remove("hidden");
        (searchBarEl.children[0] as HTMLInputElement).focus();
      }
    };

    window.addEventListener("click", function handleClick(e) {
      if (!getIsInputHidden() && e.target === searchBarEl) {
        e.preventDefault();
        handleInputHide();
        return;
      }
    });

    window.addEventListener("keydown", function handleOpenSearch(e) {
      if (searchBarEl) {
        if (e.key === "Escape") {
          e.preventDefault();
          handleInputHide();
        }

        if (e.ctrlKey && e.key === "k") {
          e.preventDefault();
          if (getIsInputHidden()) {
            handleInputShow();
          } else {
            handleInputHide();
          }
        }
      }
    });

    searchButtonEl?.addEventListener(
      "click",
      function handleSearchButtonClick(e) {
        e.preventDefault();
        handleInputShow();
      },
    );

    searchBarEl?.addEventListener("keydown", function handleSearch(e) {
      if ((e as KeyboardEvent).key === "Enter") {
        e.preventDefault();
        console.log("TODO: Handle search");
      }
    });

    themeBtn?.addEventListener("click", function handleThemeChange() {
      if (htmlEl) {
        htmlEl.className = htmlEl.className === "dark" ? "light" : "dark";
      }
    });
  </script>
</html>
