---
const props = Astro.props;

let isStreaming;

// TODO: Avoid blocking the rendering for this
if(props.icon === 'twitch') {
  try {
    
    const username = 'laspark';

    const getTokenURL = 'https://id.twitch.tv/oauth2/token'
    const isStreamingURL = `https://api.twitch.tv/helix/streams?user_login=${username}`;

    const clientId = 'wjvrvuqjhehg89tj2zb0vrbysf55w0';
    const clientSecret = process.env.TWITCH_CLIENT_SECRET;

    const tokenRequest = new Request(getTokenURL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body:`client_id=${clientId}&client_secret=${clientSecret}&grant_type=client_credentials`,
    })

    const accessToken = await fetch(tokenRequest).then(d => d.json()).then(j => j.access_token);

    const isStreamingRequest = new Request(isStreamingURL, {
      method: 'GET',
      headers: {
        'Client-Id': clientId,
        'Authorization': `Bearer ${accessToken}`,
      }
    })

    isStreaming = await fetch(isStreamingRequest).then(d => d.json()).then(j => j.data[0]);
  } catch {}
}

/* @vite-ignore */
const iconURL = await import(`/icons/${props.icon}.svg`).then((res) => res.default);

---

<li class="relative w-8 h-8 hover:cursor-pointer">
  <img class="current-color-red" src={iconURL} />
  {isStreaming && <span class="absolute -right-1 -top-1 bg-red-400 rounded w-2 h-2"></span>}
</li>
